<?php

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Filesystem\Folder;
use Cake\Filesystem\File;

/**
 * Students Controller
 *
 * @property \App\Model\Table\StudentsTable $Students
 *
 * @method \App\Model\Entity\Student[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class StudentsController extends AppController
{

    public function initialize()
    {
        $this->loadModel('StudentClassroom');

        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadComponent('Upload');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index($classroomId = null)
    {
        $students = $this->paginate($this->Students);

        $this->set(compact('students', 'classroomId'));
    }

    /**
     * View method
     *
     * @param string|null $id Student id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $student = $this->Students->get($id, [
            'contain' => []
        ]);

        $this->set('student', $student);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $student = $this->Students->newEntity();
        if ($this->request->is('post')) {
            $student = $this->Students->patchEntity($student, $this->request->getData());

            if ($this->nc($this->request->getData('nationalCode'))) {
                if ($this->Students->save($student)) {
                    $this->Flash->success(__('دانش آموز با موفقیت ایجاد شد'));

                    return $this->redirect(['action' => 'index']);
                }
            }else{
                $this->Flash->error(__('کد ملی دانش آموز نامعتبر است'));
            }
        }
        $this->set(compact('student'));
    }

    protected function nc($nationalCode)
    {
        if (strlen($nationalCode) === 10) {
            if ($nationalCode === "1111111111" ||
                $nationalCode === "0000000000" ||
                $nationalCode === "2222222222" ||
                $nationalCode === "3333333333" ||
                $nationalCode === "4444444444" ||
                $nationalCode === "5555555555" ||
                $nationalCode === "6666666666" ||
                $nationalCode === "7777777777" ||
                $nationalCode === "8888888888" ||
                $nationalCode === "9999999999") {
                return false;
            }
            $c = substr($nationalCode, 9, 1);
            $n = substr($nationalCode, 0, 1) * 10 +
                substr($nationalCode, 1, 1) * 9 +
                substr($nationalCode, 2, 1) * 8 +
                substr($nationalCode, 3, 1) * 7 +
                substr($nationalCode, 4, 1) * 6 +
                substr($nationalCode, 5, 1) * 5 +
                substr($nationalCode, 6, 1) * 4 +
                substr($nationalCode, 7, 1) * 3 +
                substr($nationalCode, 8, 1) * 2;
            $rr = floor($n / 11);
            $r = $n - $rr * 11;

//            debug($n);
//            debug($c);
//            debug($rr);
//            debug($r);

            if ($r == 0 && $r == $c || $r == 1 && $c == 1 || $r > 1 && $c == 11 - $r) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public function file()
    {
        $dir = new Folder('uploads');

        $r = $this->nc('3243278821');
        //debug($r);

        $file = new File($dir->pwd() . DS . 'students.json');
        $content = $file->read();
        $students = json_decode($content);

        $duplicates = array();
        $invalidNationalCode = array();
        $havNotNationalCode = array();

        foreach ($students as $student) {
            if (!empty($student->nationalCode)) {

                if($this->nc($student->nationalCode)){
                    $person = explode(" ", $student->firstName);
                    $item = $this->Students->newEntity();
                    $item->firstName = $person[0];
                    $item->nationalCode = $student->nationalCode;

                    switch (count($person)) {
                        case 2:
                            $item->lastName = trim($person[1]);
                            break;
                        case 3:
                            $item->lastName = trim($person[1] . ' ' . $person[2]);
                            break;
                        case 4:
                            $item->lastName = trim($person[1] . ' ' . $person[2] . ' ' . $person[3]);
                            break;
                    }

                    $r = array_search($student->nationalCode, array_column($duplicates, 'nationalCode'));

                    if (!$r) {
                        $this->Students->save($item);
                        array_push($duplicates, $item);
                    }
                }else{
                    array_push($invalidNationalCode, $student);
                }

            } else {
                array_push($havNotNationalCode, $student);
            }
        }

        $file->close();

        //debug(count($duplicates));
        debug(count($invalidNationalCode));
        debug($invalidNationalCode);

//        if ($this->request->is('post')) {
//            $fileName = $this->request->getData('excel')["name"];
//            $uploadPath = "uploads/";
//            $uploadFile = $uploadPath . $fileName;
//            if (move_uploaded_file($this->request->getData('excel')["tmp_name"], $uploadFile)) {
//                $file = new File($dir->pwd() . DS . $fileName);
//                $content = $file->read();
//                $students = json_decode($content);
//
//                foreach ($students as $student){
//                    $x = explode(" ",$student->firstName);
//                    $item = $this->Students->newEntity();
//                    $item->firstName = $x[0];
//                    $item->lastName = $x[1].' '.$x[2].' '.$x[3];
//                    $item->nationalCode = $student->nationalCode;
//
//                    switch (count($x)) {
//                        case 2:
//                            $item->lastName = trim($x[1]);
//                            break;
//                        case 3:
//                            $item->lastName = trim($x[1].' '.$x[2]);
//                            break;
//                        case 4:
//                            $item->lastName = trim($x[1].' '.$x[2].' '.$x[3]);
//                            break;
//                    }
//
//                    if($item->nationalCode != null){
//                        $this->Students->save($item);
//                    }
//                }
//
//                $file->close();
//            }
//        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Student id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $student = $this->Students->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $student = $this->Students->patchEntity($student, $this->request->getData());
            if ($this->Students->save($student)) {
                $this->Flash->success(__('دانش آموز با موفقیت ویرایش شد'));

                return $this->redirect(['action' => 'index']);
            }
        }
        $this->set(compact('student'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Student id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $student = $this->Students->get($id);
        if ($this->Students->delete($student)) {
            $this->Flash->success(__('دانش آموز با موفقیت حذف شد'));
        } else {
            $this->Flash->error(__('حذف دانش آموز با مشکل مواجه گردید'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
